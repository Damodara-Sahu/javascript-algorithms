{"version":3,"sources":["components/Sidebar.js","algo/arrays/merge-sorted-arrays.js","components/Main.js","components/SplitSidebarView.js","config/constants.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","className","href","mergeSortedArrays","arr1","arr2","i","j","result","len1","length","len2","push","slice","console","log","Main","id","aria-expanded","aria-labelledby","role","aria-controls","aria-hidden","language","style","docco","toString","SplitSidebarView","props","width","window","innerWidth","state","sideBarSize","getSize","sideBarGrowing","handleDrag","bind","onDragFinished","onResizerDoubleClick","windowWidth","size","this","setState","event","children","onChange","resizerStyle","split","minSize","maxSize","Component","openTarget","hash","location","substring","detail","document","getElementById","tagName","toLowerCase","open","App","addEventListener","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09d44a22.chunk.js","sourcesContent":["import React from 'react';\n\nimport './sidebar.css';\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar\">\n      <nav>\n        <ul className=\"list\">\n          <li>\n            <header className=\"title\">Arrays</header>\n            <ul className=\"subList\">\n              <li><a href=\"#is-sorted\">Merge two sorted arrays</a></li>\n              {/* <li><a href=\"#is-find-index\">Find an index in array</a></li> */}\n            </ul>\n          </li>\n\n          <li>\n            <header className=\"title\">Sorting</header>\n            <ul className=\"subList\">\n              <li><a href=\"#sorting-bubble\">Bubble sort</a></li>\n              <li><a href=\"sorting-quick-sort\">Quick sort</a></li>\n            </ul>\n          </li>\n\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/**\n * Write a function which merges two sorted arrays of integers\n * and prints result\n * runtime O(n)\n *\n * @param {array, array}\n * @return {array} - sorted\n */\n\nconst mergeSortedArrays = (arr1, arr2) => {\n  let i = 0, // initial index for the first array\n    j = 0, // initial index for the second array,\n    result = [];\n\n  const len1 = arr1.length,\n    len2 = arr2.length;\n\n  while (i < len1 && j < len2 ) {\n    if (arr1[i] < arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n    } else {\n      result.push((arr2[j]));\n      j++;\n    }\n  }\n\n  if (i < len1) {\n    result = [...result, ...arr1.slice(i)];\n  }\n\n  if (j < len2) {\n    result = [...result, ...arr2.slice(j)];\n  }\n\n  return result;\n};\n\n// other solution but also with a loop\nconst mergeSortedArrays1 = (arr1, arr2) => {\n    let i = 1,\n        j = 1,\n        firstArr1 = arr1[0],\n        firstArr2 = arr2[0],\n        merged = [];\n\n    const len1 = arr1.length,\n        len2 = arr2.length;\n\n    // case if one array is empty\n    if (len1 === 0) {\n        return arr2;\n    }\n    if (len2 === 0) {\n        return arr1;\n    }\n\n    // if firstArr1 or firstArr2 exists we will insert to merged array\n    // will go inside while loop\n    // to insert: firstArr1 exists and firstArr2 doesn't exists\n    // or both exists and firstArr1 < firstArr2\n    // this is the critical part of the example\n    while(firstArr1 || firstArr2) {\n        if ( (firstArr1 && !firstArr2) || firstArr1 < firstArr2 ) {\n            merged.push(firstArr1);\n            firstArr1 = arr1[i++];\n        } else {\n            merged.push(firstArr2);\n            firstArr2 = arr2[j++];\n        }\n    }\n\n    return merged;\n};\n\nconsole.log('mergeSortedArrays', mergeSortedArrays([1, 2, 4, 6], [3, 7, 9]));\n\nexport { mergeSortedArrays };\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco, dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { mergeSortedArrays } from './../algo/arrays/merge-sorted-arrays';\n\nimport './main.css';\n\nfunction Main() {\n  return (\n    <div className=\"main\">\n      <h2>Arrays</h2>\n      \n      <ul>\n        <li>\n          <details\n            className=\"details\"\n            id=\"is-sorted\"\n            aria-expanded=\"false\"\n            aria-labelledby=\"label\">\n            <summary role=\"button\" aria-controls=\"content\">\n              <span className=\"question\">\n                Question:\n                <strong>merge two sorted arrays.</strong>\n              </span>\n            </summary>\n\n            <div aria-hidden=\"true\">\n              <h3 className=\"title\">Solution:</h3>\n\n              <SyntaxHighlighter\n                language=\"javascript\"\n                // style={dark}\n                style={docco}\n              >\n                {mergeSortedArrays.toString()}\n              </SyntaxHighlighter>\n            </div>\n          </details>\n        </li>\n\n      </ul>\n  </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport { Component } from 'react';\n//import { boundMethod } from 'autobind-decorator';\nimport SplitPane from 'react-split-pane';\nimport PropTypes from 'prop-types';\nimport { MOBILE_DEVICE, MINSIZE, EXPANDEDSIZE, THRESHOLDSIZE } from './../config/constants';\n\nimport './resizer.css';\n\nconst propTypes = {\n  children: PropTypes.any\n};\n\nexport default class SplitSidebarView extends Component {\n  constructor (props) {\n    super(props);\n\n    const width = window.innerWidth;\n    this.state = {\n      sideBarSize: this.getSize(width),\n      sideBarGrowing: false\n    };\n\n    this.handleDrag = this.handleDrag.bind(this);\n    this.onDragFinished = this.onDragFinished.bind(this);\n    this.onResizerDoubleClick = this.onResizerDoubleClick.bind(this);\n  }\n\n  getSize(windowWidth) {\n    const minCollapsedWidth = MOBILE_DEVICE; // tablet/mobile devices\n    return windowWidth >= minCollapsedWidth ? EXPANDEDSIZE : MINSIZE;\n  }\n\n  handleDrag(size) {\n    if (size !== this.state.sideBarSize) {\n      this.setState({\n        sideBarSize: size,\n        sideBarGrowing: this.state.sideBarSize < size\n      });\n    }\n  }\n\n  onDragFinished() {\n    this.setState({\n      sideBarSize: this.state.sideBarGrowing ? EXPANDEDSIZE : MINSIZE\n    });\n  }\n\n  onResizerDoubleClick(event) {\n    this.setState({\n      sideBarSize: this.state.sideBarSize === MINSIZE ? EXPANDEDSIZE : MINSIZE\n    });\n  }\n\n  render() {\n    const { sideBarSize } = this.state;\n    const { children } = this.props;\n\n    return (\n      <SplitPane\n        className={sideBarSize < THRESHOLDSIZE ? 'sidebarShortVersion' : null}\n        onChange={this.handleDrag}\n        onDragFinished={this.onDragFinished}\n        onResizerDoubleClick={this.onResizerDoubleClick}\n        resizerStyle={{ width: '0' }}\n        split=\"vertical\"\n        minSize={MINSIZE}\n        maxSize={EXPANDEDSIZE}\n        size={sideBarSize}>\n        { children }\n      </SplitPane>\n    );\n  }\n}\n\nSplitSidebarView.propTypes = propTypes;\n","// screen width\nexport const DESKTOP_DEVICE = 1440; // mac 13 inches\nexport const TABLET_DEVICE = 1024;\nexport const MOBILE_DEVICE = 767;\n\n\n// sidebar\nexport const MINSIZE = 67;\nexport const EXPANDEDSIZE = 227;\nexport const THRESHOLDSIZE = (MINSIZE + EXPANDEDSIZE) / 2;\n","import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar';\nimport Main from './components/Main';\nimport SplitSidebarView from './components/SplitSidebarView';\n\nimport './App.css';\n\nfunction openTarget() {\n  let hash = location.hash.substring(1);  // eslint-disable-line\n\n  if (hash) {\n    var detail = document.getElementById(hash);\n  }\n\n  if (detail && detail.tagName.toLowerCase() === 'details') {\n    detail.open === true ?  detail.open = false : detail.open = true\n  }\n}\n\nclass App extends Component {\n  state = {\n\n  }\n\n  componentWillMount() {\n    window.addEventListener('hashchange', openTarget);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SplitSidebarView>\n          <Sidebar\n            className=\"sidebar\"\n          />\n          <div className=\"wrapper\">\n            <header className=\"App-header\">\n              Computer Science Algorithms by Javascript\n            </header>\n            <Main />\n          </div>\n        </SplitSidebarView>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}